// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  /// Always after the prisma-client-js generator
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
  // useType = "MyType"
  // In case you need to use a type, export it inside the namespace and we will add a index signature to it
  // (e.g.  export namespace PrismaJson { export type MyType = {a: 1, b: 2} }; will generate namespace.MyType["TYPE HERE"])
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(nanoid(5))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Company {
  id    String  @id @default(nanoid(5))
  title String
  url   String?
  logo  String?

  models Model[]
}

model Conversation {
  id        String   @id @default(nanoid(7))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUser   User   @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String

  type  ConversationType
  pApps PApp[]
  title String?
}

enum ConversationType {
  LLM
  chat
  notification
}

model Message {
  id        String   @id @default(nanoid(5))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationModel   PApp   @relation(fields: [conversationModelId], references: [id], onDelete: Cascade)
  conversationModelId String

  content String
  role    MessageRole
}

enum MessageRole {
  user
  assistant
  system
}

model Model {
  id        String   @id @default(nanoid(5))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  logo  String?
  url   String?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  pApps     PApp[]
}

model PApp {
  id        String   @id @default(nanoid(5))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  model   Model   @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId String
  title   String

  conversations Conversation[]

  prompt      String?
  temperature Float?
  messages    Message[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Session {
  id           String   @id @default(nanoid(5))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(nanoid(5))
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  Conversation Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
