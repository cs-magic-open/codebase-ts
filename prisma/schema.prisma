// -----------------------------------------------------------------------------
// ref: https://pris.ly/d/prisma-schema
// -----------------------------------------------------------------------------

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client/generated" // support for webstorm autocompletion

  previewFeatures = ["postgresqlExtensions", "multiSchema"]
}

generator json {
  /// Always after the prisma-client-js generator
  provider  = "npx prisma-json-types-generator"
  namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
  // useType = "MyType"
  // In case you need to use a type, export it inside the namespace and we will add a index signature to it
  // (e.g.  export namespace PrismaJson { export type MyType = {a: 1, b: 2} }; will generate namespace.MyType["TYPE HERE"])
}

generator zod {
  provider = "npx zod-prisma-types"
  output   = "./generated/zod" // default is ./generated/zod
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")

  extensions = [vector]

  schemas = ["public", "auth", "customer", "payment", "llm", "poketto", "wechat", "assistant"]
}

// -----------------------------------------------------------------------------
// public
// -----------------------------------------------------------------------------

enum PlatformType {
  Poketto
  FlowGPT
  OpenAI
  MidJourney
  StableDiffusion
  OpenChat

  // align for next-auth
  sms
  email
  github
  discord
  google

  // for assistant
  wxmpArticle
  bilibiliVideo
  xhsNote

  @@schema("public")
}

enum TaskStatus {
  pending
  running
  paused
  done
  discarded

  @@schema("public")
}

model Company {
  id    String  @id @default(dbgenerated("nanoid(5)"))
  title String
  url   String?
  logo  String?

  models Model[]

  @@schema("public")
}

// -----------------------------------------------------------------------------
// customer
// -----------------------------------------------------------------------------

model User {
  id        String   @id @default(dbgenerated("nanoid(7)")) @db.VarChar(7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platformType PlatformType @default(Poketto)
  platformId   String

  /// [UserPlatformArgs]
  platformArgs Json?

  accounts Account[]
  sessions Session[]

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  phoneVerified DateTime?
  wxid          String?   @unique
  wxidVerified  DateTime?
  image         String?
  description   String?

  invitedFrom InvitationRelation[] @relation("from")
  invitedTo   InvitationRelation[] @relation("to")

  followedBy FollowRelation[] @relation("from")
  following  FollowRelation[] @relation("to")

  /// note: 这里显式声明计数字段，是为了提高性能，以及 prisma 对 computed field 的 type support 还处于开始阶段
  /// 我们为了对象的数据切片，故分开
  followedByCount Int @default(0)
  followingCount  Int @default(0)

  chatMessages       ChatMessage[]
  chatMessageActions ChatMessageAction[]

  tags PokettoAppTag[]

  appComments PokettoAppComment[]
  appActions  PokettoAppAction[]
  StarringApp PokettoAppStarred[]
  createdApps PokettoApp[]

  conversations Conversation[]

  balance Int @default(0)

  // 应该要有个多模态，获取账单历史数据……
  stripePayments        StripePayment[]
  stripeSubscriptionEnd DateTime?
  stripeCustomerId      String?         @unique

  // 每日需要更新

  /// [ModelQuota]
  quota         Json?
  feedbacks     Feedback[]
  appCategories PokettoAppCategory[]
  coupons       Coupon[]
  evalApps      EvalApp[]
  evalConvs     Conv[]

  // maybe we only need one id
  @@unique([platformType, platformId], name: "platform")
  @@schema("customer")
}

model Feedback {
  id String @id @default(cuid())

  issueType IssueType
  title     String
  detail    String
  contact   String
  anonymous Boolean   @default(false)

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  @@schema("customer")
}

model FollowRelation {
  id String @id @default(cuid())

  from   User   @relation("from", fields: [fromId], references: [id], onDelete: Cascade)
  to     User   @relation("to", fields: [toId], references: [id], onDelete: Cascade)
  fromId String
  toId   String

  @@schema("customer")
}

enum InvitationStatus {
  Idle
  Pending
  Accepted
  Expired

  @@schema("customer")
}

model InvitationRelation {
  id String @id @default(cuid())

  status InvitationStatus @default(Idle)
  // code if necessary

  from   User?  @relation("from", fields: [fromId], references: [id], onDelete: Cascade)
  fromId String

  to   User?   @relation("to", fields: [toId], references: [id], onDelete: Cascade)
  toId String? @unique

  @@schema("customer")
}

enum IssueType {
  Debunk
  PuzzleInUse
  FeatureRequest
  BugReport
  LeakReport
  BusinessCollaboration

  @@schema("customer")
}

// -----------------------------------------------------------------------------
// auth
// -----------------------------------------------------------------------------

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  refresh_token_expires_in Int? // github necessary

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@schema("auth")
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("auth")
}

// -----------------------------------------------------------------------------
// payment
// -----------------------------------------------------------------------------

model Coupon {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.VarChar(7)

  @@schema("payment")
}

// todo: server 自己的 api 是不是够用了
model StripeProduct {
  // id 从 server 拿
  id String @id

  price    Float
  currency String
  mode     StripeMode
  // 订阅的期限
  expire   Int?
  level    StripeSubscriptionLevel? @default(basic)

  payments StripePayment[]

  @@schema("payment")
}

model StripePayment {
  // id 从 server 拿
  id String @id

  // 记录要保留
  product    StripeProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  count      Int           @default(1)
  // 优惠码
  redeemCode String?

  productId String
  userId    String

  @@schema("payment")
}

enum StripeMode {
  payment
  subscription

  @@schema("payment")
}

enum StripeSubscriptionLevel {
  basic
  premium
  extreme

  @@schema("payment")
}

enum TransactionType {
  charge
  consume

  @@schema("payment")
}

// -----------------------------------------------------------------------------
// llm, todo: unify basic llm with eval-ai
// -----------------------------------------------------------------------------

model ChatMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? // system notification

  role                PromptRoleType        @default(user)
  content             String?
  format              ChatMessageFormatType @default(text)
  userActionOnMessage ChatMessageAction[]

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  // ref: https://js.langchain.com/docs/modules/data_connection/vectorstores/integrations/prisma
  namespace String?                @default("default")
  vector    Unsupported("vector")?

  // 每条 message 付费
  cost Float? @default(0)

  modelType   String?  @default("gpt-3.5-turbo")
  isUsingFree Boolean? @default(false)

  @@schema("llm")
}

model ChatMessageAction {
  id String @id @default(cuid())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  action String

  @@schema("llm")
}

enum ChatMessageFormatType {
  text
  image
  voice
  video
  map
  realtimeVoice
  realtimeVideo

  systemNotification

  @@schema("llm")
}

model Conversation {
  id String @id @default(cuid())

  isActive Boolean       @default(true)
  messages ChatMessage[]

  userId String
  appId  String

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  app  PokettoApp @relation(fields: [appId], references: [id], onDelete: Cascade)

  pinned Boolean @default(false)

  @@unique([userId, appId], name: "conversation", map: "conversation")
  @@schema("llm")
}

enum PromptRoleType {
  system
  user
  assistant
  data
  tool
  function

  @@schema("llm")
}

model Conv {
  id        String   @id @default(dbgenerated("nanoid(7)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUser   User   @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String

  requests         Request[] @relation("requests")
  currentRequestId String?

  titleResponse Response?

  @@schema("llm")
}

model LlmResponse {
  id        String   @id @default(dbgenerated("nanoid(7)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId String

  // 基于核心内容总结后的结果
  /// [ICallLlmResponse]
  response Json?

  // 每一种模型都可以生成一张图
  ossUrl String?

  @@schema("llm")
}

model Model {
  id        String   @id @default(dbgenerated("nanoid(5)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  logo  String?
  url   String?

  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  apps      EvalApp[]

  @@schema("llm")
}

model Request {
  id        String   @id @default(dbgenerated("nanoid(9)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// [QueryContex]
  context Json

  conv   Conv   @relation("requests", fields: [convId], references: [id], onDelete: Cascade)
  convId String

  apps EvalApp[]

  responses Response[]

  @@schema("llm")
}

model Response {
  // appId 与 requestId 与 responseId 是两两多对多
  // appClientId String // 做好同步的关键一招！ //不用这个了，直接response，不要依赖倒置
  id        String   @id @default(dbgenerated("nanoid(9)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conv   Conv?   @relation(fields: [convId], references: [id], onDelete: Cascade)
  convId String? @unique

  // 用户也可以手动更新 response，所以 request 是非必须的，强制required写起来也麻烦
  request     Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId   String?
  app         EvalApp? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId       String?
  appClientId String? // requestId + appClientId 唯一确定客户端； requestId 与 appId 是一对多关系

  content String?
  error   String?

  tTrigger DateTime?
  tStart   DateTime?
  tEnd     DateTime?

  // 客户端
  isDraft       Boolean?  @default(false)
  interruptedAt DateTime?

  @@schema("llm")
}

model EvalApp {
  id        String   @id @default(dbgenerated("nanoid(5)")) @db.VarChar(5)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUser User?   @relation(fields: [user], references: [id], onDelete: Cascade)
  // string
  // Optional
  // A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.
  user     String?

  model     Model  @relation(fields: [modelName], references: [id], onDelete: Cascade)
  // ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.
  modelName String

  requests  Request[]
  responses Response[]

  systemPrompt String?
  title        String?

  // 授权上架后的才可以展示在选择框内
  granted Boolean @default(false)

  // -------
  // langchain的代码 OpenAIBaseInput
  // todo: nai doc: https://platform.openai.com/docs/api-reference/chat/create
  // -------

  // number or null
  // Optional
  // Defaults to 1
  // What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  //
  // We generally recommend altering this or top_p but not both.
  temperature Float? @default(0.7)

  // integer or null
  // Optional
  // The maximum number of tokens that can be generated in the chat completion.
  //
  // The total length of input tokens and generated tokens is limited by the model's context length. Example Python code for counting tokens.
  maxTokens Int? @default(4096)

  // number or null
  // Optional
  // Defaults to 1
  // An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
  //
  // We generally recommend altering this or temperature but not both.
  topP Float? @default(0.5)

  // number or null
  // Optional
  // Defaults to 0
  // Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
  frequencyPenalty Float? @default(0)

  // number or null
  // Optional
  // Defaults to 0
  // Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
  presencePenalty Float? @default(0)

  // integer or null
  // Optional
  // Defaults to 1
  // How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
  n Int? @default(1)

  // map
  // Optional
  // Defaults to null
  // Modify the likelihood of specified tokens appearing in the completion.
  //
  // Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
  // logitBias?: Record<string, number>;

  // boolean or null
  // Optional
  // Defaults to false
  // If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Example Python code.
  streaming Boolean? @default(true)

  // /** Holds any additional parameters that are valid to pass to {@link
  // * https://platform.openai.com/docs/api-reference/completions/create |
  // * `openai.createCompletion`} that are not explicitly specified on this class.
  // */
  // modelKwargs?: Record<string, any>;

  // string / array / null
  // Optional
  // Defaults to null
  // Up to 4 sequences where the API will stop generating further tokens.
  stop String[] @default([])

  // /**
  // * Timeout to use when making requests to OpenAI.
  // */
  timeout Int? @default(3000)

  // /**
  // * API key to use when making requests to OpenAI. Defaults to the value of
  // * `OPENAI_API_KEY` environment variable.
  //*/
  openAIApiKey String?

  @@schema("llm")
}

// -----------------------------------------------------------------------------
// poketto
// -----------------------------------------------------------------------------

model PokettoApp {
  id        String   @id @default(dbgenerated("nanoid(7)")) @db.VarChar(7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platformType PlatformType @default(Poketto)
  platformId   String

  creator      User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  name         String
  avatar       String
  desc         String
  language     String             @default("en")
  isOpenSource Boolean            @default(true)
  version      String             @default("1.0.0")
  tags         PokettoAppTag[]
  category     PokettoAppCategory @relation(fields: [categoryMain, categorySub], references: [main, sub], onDelete: Cascade)
  categoryMain Int
  categorySub  Int

  actions  PokettoAppAction[]
  using    Conversation[]
  starring PokettoAppStarred[]
  comments PokettoAppComment[]
  state    PokettoAppState?

  modelName   String
  prompts     PokettoAppPrompts[]
  temperature Float

  @@unique([platformType, platformId], name: "platform")
  @@schema("poketto")
}

model PokettoAppAction {
  id String @id @default(cuid())

  user   User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
  app    PokettoApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId  String

  action String

  @@schema("poketto")
}

model PokettoAppCategory {
  // category 是由我们自己创建，不交给用户
  id String @id @default(cuid())

  main   Int
  sub    Int
  App    PokettoApp[]
  User   User?        @relation(fields: [userId], references: [id])
  userId String?

  @@unique([main, sub], name: "category")
  @@schema("poketto")
}

model PokettoAppComment {
  id String @id @default(cuid())

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  aApp   PokettoApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId  String

  title   String?
  content String
  rate    Int?    @default(0)

  @@schema("poketto")
}

model PokettoAppPrompts {
  id    String     @id @default(cuid())
  app   PokettoApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  role    PromptRoleType
  content String

  @@schema("poketto")
}

model PokettoAppStarred {
  id String @id @default(cuid())

  app   PokettoApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  isActive Boolean @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@schema("poketto")
}

model PokettoAppState {
  id String @id @default(cuid())

  views  Int   @default(0)
  stars  Int   @default(0)
  forks  Int   @default(0)
  tips   Float @default(0)
  calls  Int   @default(0)
  shares Int   @default(0)

  app   PokettoApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String     @unique

  @@schema("poketto")
}

model PokettoAppTag {
  id String @id @default(cuid())

  creator   User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String?

  name String       @unique
  apps PokettoApp[]

  @@schema("poketto")
}

enum PokettoRoleType {
  admin
  manager
  normal

  @@schema("poketto")
}

// -----------------------------------------------------------------------------
// wechat
// -----------------------------------------------------------------------------

model WechatMessage {
  id        String   @id // '3430847513737913148',
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  talker   WechatConv @relation("talker", fields: [talkerId], references: [id], onDelete: Cascade)
  talkerId String // 'wxid_ck85xup8b1bj21',

  listener   WechatConv? @relation("listener", fields: [listenerId], references: [id])
  listenerId String?

  room   WechatConv? @relation("room", fields: [roomId], references: [id], onDelete: Cascade)
  roomId String? // : '47778688503@chatroom',

  timestamp     Int // 1712846017,
  type          Int //: 7,
  text          String? // '现在我们要支持 card - model 的一对多关系了',
  mentionIdList String[] // : [],
  filename      String?

  @@schema("wechat")
}

model WechatConv {
  id        String   @id //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// user
  // user necessary, room not, room is topic
  name             String? //: '南川 Mark',
  // puppet-web 可能拿不到 avatar
  avatar           String? //: "https://wx.qlogo.cn/mmhead/ver_1/FrESIibfTuEAHkrQgEm89K4iaibfHclRaaWuOYo2GA6L9zibVxliamyLKhkGuglr4icf9Uo7ZYOoGShTdGZAsVVuOosrzODvFKGkbrUMg0kM8IkFd17WUpRfIxWU5oskrEDIxa/0",
  sentMessages     WechatMessage[] @relation("talker")
  receivedMessages WechatMessage[] @relation("listener")

  friend    Boolean? //: true,
  gender    Int? //: 1,
  type      Int? //: 1,
  weixin    String? //: "youshouldspeakhow",
  alias     String? //: "",
  city      String? //: "Haidian",
  province  String? // : "Beijing",
  signature String? //: "Run, don’t look back.",
  phone     String[] //: [],

  address String? // puppet-web 有 address
  star    Boolean? // puppet-web 有星标

  /// room
  messages WechatMessage[] @relation("room")

  adminIdList  String[] //: [],
  memberIdList String[] //: ["wxid_ck85xup8b1bj21", "wxid_keep6ntaelc822", "wxid_llwaw2tg2sre12"],
  topic        String? //: "test bot 0-1"

  // todo: owner
  ownerId String? // : "wxid_ck85xup8b1bj21",

  /// [IWechatPreference]
  preference Json?
  /// [IWechatData]
  data       Json?
  tasks      Task[]

  @@schema("wechat")
}

//
// model WechatUser {
//   id        String   @id //
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   name             String //: '南川 Mark',
//   // puppet-web 可能拿不到 avatar
//   avatar           String? //: "https://wx.qlogo.cn/mmhead/ver_1/FrESIibfTuEAHkrQgEm89K4iaibfHclRaaWuOYo2GA6L9zibVxliamyLKhkGuglr4icf9Uo7ZYOoGShTdGZAsVVuOosrzODvFKGkbrUMg0kM8IkFd17WUpRfIxWU5oskrEDIxa/0",
//   sentMessages     WechatMessage[] @relation("talker")
//   receivedMessages WechatMessage[] @relation("listener")
//
//   friend    Boolean? //: true,
//   gender    Int? //: 1,
//   type      Int? //: 1,
//   weixin    String? //: "youshouldspeakhow",
//   alias     String? //: "",
//   city      String? //: "Haidian",
//   province  String? // : "Beijing",
//   signature String? //: "Run, don’t look back.",
//   phone     String[] //: [],
//
//   address String? // puppet-web 有 address
//   star    Boolean? // puppet-web 有星标
//
//   tasks Task[]
//
//   /// [IWechatPreference]
//   preference Json?
//   /// [IWechatData]
//   data       Json?
// }
//
// model WechatRoom {
//   id        String   @id //
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   messages WechatMessage[]
//
//   adminIdList  String[] //: [],
//   memberIdList String[] //: ["wxid_ck85xup8b1bj21", "wxid_keep6ntaelc822", "wxid_llwaw2tg2sre12"],
//   avatar       String? //: "https://wx.qlogo.cn/mmcrhead/CIBk7rL0WLTU0WWdfTzHwImxNakuKQnE9DxX8PRT6tT0DiaPV6HCoGmxUiatVSwnXpD8JVPQ7vrhg/0",
//   topic        String? //: "test bot 0-1"
//
//   // todo: owner
//   ownerId String? // : "wxid_ck85xup8b1bj21",
//
//   /// [IWechatPreference]
//   preference Json?
//   /// [IWechatData]
//   data       Json?
//   Task       Task[]
// }

// -----------------------------------------------------------------------------
// assistant
// -----------------------------------------------------------------------------

model Card {
  id        String   @id @default(dbgenerated("nanoid(7)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// [IUserSummary]
  user Json?

  platformType PlatformType

  // 微信可能不知道实际id是多少
  platformId   String?
  // [ICardPlatform]
  platformData Json?

  sourceUrl   String?
  /// [IUserSummary]
  author      Json?
  time        DateTime?
  title       String?
  description String?

  /// [IMedia]
  cover   Json?
  /// [IMedia]
  images  Json[]
  /// [IMedia]
  iFrames Json[]
  /// [IMedia]
  videos  Json[]

  // read from url
  html String?

  // 公众号文章的核心内容（markdown格式）
  contentMd String?

  /// [ICardStat]
  stat Json?

  ossUrl      String?
  llmResponse LlmResponse[]

  // todo: card comments
  @@unique([platformType, platformId])
  @@schema("assistant")
}

model Task {
  id        String   @id @default(dbgenerated("nanoid(7)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  status      TaskStatus @default(pending)

  conv   WechatConv? @relation(fields: [convId], references: [id], onDelete: Cascade)
  convId String?

  notes    String[]
  priority Int      @default(5)

  /// [TaskTimer]
  timer Json?

  @@schema("assistant")
}
