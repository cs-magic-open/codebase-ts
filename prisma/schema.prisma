// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  /// Always after the prisma-client-js generator
  provider  = "npx prisma-json-types-generator"
  namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
  // useType = "MyType"
  // In case you need to use a type, export it inside the namespace and we will add a index signature to it
  // (e.g.  export namespace PrismaJson { export type MyType = {a: 1, b: 2} }; will generate namespace.MyType["TYPE HERE"])
}

generator zod {
  provider                         = "npx zod-prisma-types"
  output                           = "./generated/zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = true // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = true // default is false
  // prismaClientPath                 = "./path/to/prisma/client" // default is client output path
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(nanoid(5))
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(nanoid(5))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id    String  @id @default(nanoid(5))
  name  String?
  image String?

  email         String?   @unique
  phone         String?   @unique
  wxid          String?   @unique
  emailVerified DateTime?
  phoneVerified DateTime?
  wxidVerified  DateTime?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id        String    @id @default(nanoid(7))
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  platformType PlatformType
  platformId   String
  /// [ICardPlatform]
  platformData Json?

  sourceUrl   String?
  /// [IUserSummary]
  author      Json?
  time        DateTime?
  title       String?
  description String?

  /// [IMedia]
  cover   Json?
  /// [IMedia]
  images  Json[]
  /// [IMedia]
  iFrames Json[]
  /// [IMedia]
  videos  Json[]

  // 公众号文章的核心内容（markdown格式）
  contentMd      String?
  // 基于核心内容总结后的结果
  contentSummary String?

  // todo: card comments
  /// [ICardStat]
  stat Json?

  /// [IModel]
  model Json?

  @@unique([platformType, platformId])
}

enum PlatformType {
  wechatArticle
  bilibiliVideo
  xiaohongshuNote
}
