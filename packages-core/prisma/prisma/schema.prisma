// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(nanoid(5))
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(nanoid(5))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id    String  @id @default(nanoid(5))
  name  String?
  image String?

  email         String?   @unique
  phone         String?   @unique
  wxid          String?   @unique
  emailVerified DateTime?
  phoneVerified DateTime?
  wxidVerified  DateTime?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id        String   @id @default(nanoid(7))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// [IUserSummary]
  user Json?

  platformType PlatformType

  // 微信可能不知道实际id是多少
  platformId   String?
  // [ICardPlatform]
  platformData Json?

  sourceUrl   String?
  /// [IUserSummary]
  author      Json?
  time        DateTime?
  title       String?
  description String?

  /// [IMedia]
  cover   Json?
  /// [IMedia]
  images  Json[]
  /// [IMedia]
  iFrames Json[]
  /// [IMedia]
  videos  Json[]

  // read from url
  html String?

  // 公众号文章的核心内容（markdown格式）
  contentMd String?

  /// [ICardStat]
  stat Json?

  ossUrl      String?
  llmResponse LlmResponse[]

  // todo: card comments
  @@unique([platformType, platformId])
}

model LlmResponse {
  id        String   @id @default(nanoid(7))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId String

  // 基于核心内容总结后的结果
  /// [ICallLlmResponse]
  response Json?
}

enum PlatformType {
  wxmpArticle
  bilibiliVideo
  xhsNote
}

model Task {
  id        String   @id @default(nanoid(7))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  status      TaskStatus @default(pending)

  owner   WechatUser? @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String?

  room   WechatRoom? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String?

  notes    String[]
  priority Int      @default(5)

  ///[TaskTimer]
  timer Json?
}

enum TaskStatus {
  pending
  running
  paused
  done
  discarded
}

model WechatMessage {
  id        String   @id // '3430847513737913148',
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  talker   WechatUser @relation("talker", fields: [talkerId], references: [id], onDelete: Cascade)
  talkerId String // 'wxid_ck85xup8b1bj21',

  listener   WechatUser? @relation("listener", fields: [listenerId], references: [id])
  listenerId String?

  room   WechatRoom? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String? // : '47778688503@chatroom',

  timestamp     Int // 1712846017,
  type          Int //: 7,
  text          String? // '现在我们要支持 card - model 的一对多关系了',
  mentionIdList String[] // : [],
  filename      String?
}

model WechatUser {
  id        String   @id //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String //: '南川 Mark',
  // puppet-web 可能拿不到 avatar
  avatar           String? //: "https://wx.qlogo.cn/mmhead/ver_1/FrESIibfTuEAHkrQgEm89K4iaibfHclRaaWuOYo2GA6L9zibVxliamyLKhkGuglr4icf9Uo7ZYOoGShTdGZAsVVuOosrzODvFKGkbrUMg0kM8IkFd17WUpRfIxWU5oskrEDIxa/0",
  sentMessages     WechatMessage[] @relation("talker")
  receivedMessages WechatMessage[] @relation("listener")

  friend    Boolean? //: true,
  gender    Int? //: 1,
  type      Int? //: 1,
  weixin    String? //: "youshouldspeakhow",
  alias     String? //: "",
  city      String? //: "Haidian",
  province  String? // : "Beijing",
  signature String? //: "Run, don’t look back.",
  phone     String[] //: [],

  address String? // puppet-web 有 address
  star    Boolean? // puppet-web 有星标

  tasks Task[]

  /// [IWechatPreference]
  preference Json?
  /// [IWechatData]
  data       Json?
}

model WechatRoom {
  id        String   @id //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages WechatMessage[]

  adminIdList  String[] //: [],
  memberIdList String[] //: ["wxid_ck85xup8b1bj21", "wxid_keep6ntaelc822", "wxid_llwaw2tg2sre12"],
  avatar       String? //: "https://wx.qlogo.cn/mmcrhead/CIBk7rL0WLTU0WWdfTzHwImxNakuKQnE9DxX8PRT6tT0DiaPV6HCoGmxUiatVSwnXpD8JVPQ7vrhg/0",
  topic        String? //: "test bot 0-1"

  // todo: owner
  ownerId String? // : "wxid_ck85xup8b1bj21",

  /// [IWechatPreference]
  preference Json?
  /// [IWechatData]
  data       Json?
  Task       Task[]
}
